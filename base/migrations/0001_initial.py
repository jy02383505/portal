# Generated by Django 2.2 on 2019-08-01 15:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.CharField(blank=True, default='', max_length=11, null=True, verbose_name='手机号')),
                ('company', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='公司名称')),
                ('is_parent', models.BooleanField(default=False, verbose_name='父账号标识')),
                ('is_child', models.BooleanField(default=False, verbose_name='子账号标识')),
                ('is_agent', models.BooleanField(default=False, verbose_name='代理商标识')),
                ('parent_username', models.CharField(blank=True, default='', max_length=255, verbose_name='父账号')),
                ('creator_username', models.CharField(default='admin', max_length=255, verbose_name='创建者')),
                ('reset_password', models.BooleanField(default=False, verbose_name='重置密码标识')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
                ('linkman', models.CharField(blank=True, default='', max_length=255, verbose_name='联系人')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=255, verbose_name='域名')),
                ('protocol', models.CharField(max_length=255, verbose_name='协议')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='域名所属用户', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '域名信息',
                'verbose_name_plural': '域名信息',
            },
        ),
        migrations.CreateModel(
            name='Perm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('code', models.CharField(max_length=255, verbose_name='标识')),
                ('content_type', models.CharField(max_length=255, verbose_name='类型')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('desc', models.CharField(default='', max_length=255, verbose_name='描述信息')),
                ('level', models.CharField(default='', max_length=255, verbose_name='菜单等级')),
                ('parent_code', models.CharField(default='', max_length=255, verbose_name='父级菜单名称')),
                ('order', models.CharField(default='', max_length=255, verbose_name='菜单顺序')),
                ('is_menu', models.BooleanField(default=False, verbose_name='是否是菜单')),
                ('url', models.CharField(default='', max_length=255, verbose_name='访问地址')),
                ('type_name', models.CharField(default='', max_length=255, verbose_name='类别名称')),
                ('en_code', models.CharField(default='', max_length=255, verbose_name='英文')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
            },
        ),
        migrations.CreateModel(
            name='PermStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=200, verbose_name='名称')),
                ('creator_username', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='操作用户')),
                ('strategy_type', models.IntegerField(choices=[(1, '系统策略'), (2, '自定义策略')], default=1, verbose_name='策略类型')),
                ('remark', models.CharField(blank=True, default='', max_length=200, verbose_name='备注')),
                ('perm', models.ManyToManyField(blank=True, related_name='权限集合', to='base.Perm')),
            ],
            options={
                'verbose_name': '权限策略',
                'verbose_name_plural': '权限策略',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='产品名称')),
                ('code', models.CharField(blank=True, max_length=255, null=True, verbose_name='产品标识')),
                ('remark', models.CharField(default='', max_length=255, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '产品',
                'verbose_name_plural': '产品',
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='供应商名称')),
                ('code', models.CharField(blank=True, max_length=255, null=True, verbose_name='代码标识')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('remark', models.CharField(default='', max_length=255, verbose_name='备注')),
            ],
            options={
                'verbose_name': '供应商',
                'verbose_name_plural': '供应商',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='服务名称')),
                ('code', models.CharField(blank=True, max_length=255, null=True, verbose_name='代码标识')),
                ('remark', models.CharField(default='', max_length=255, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '服务策略',
                'verbose_name_plural': '服务策略',
            },
        ),
        migrations.CreateModel(
            name='UserPermStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perm_strategy', models.ManyToManyField(blank=True, to='base.PermStrategy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户权限策略关系',
                'verbose_name_plural': '用户权限策略关系',
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Product')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Provider')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Service')),
            ],
            options={
                'verbose_name': '策略',
                'verbose_name_plural': '策略',
            },
        ),
        migrations.CreateModel(
            name='PermUserObj',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj_id', models.IntegerField(verbose_name='对象id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('perm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Perm')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户对象权限',
                'verbose_name_plural': '用户对象权限',
            },
        ),
        migrations.CreateModel(
            name='PermUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perm', models.ManyToManyField(blank=True, to='base.Perm')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户权限',
                'verbose_name_plural': '用户权限',
            },
        ),
        migrations.CreateModel(
            name='PermGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('perm', models.ManyToManyField(to='base.Perm')),
            ],
            options={
                'verbose_name': '组权限',
                'verbose_name_plural': '组权限',
            },
        ),
        migrations.CreateModel(
            name='OperateLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(default='', max_length=200, verbose_name='操作用户')),
                ('flag', models.CharField(max_length=20, verbose_name='功能标记')),
                ('info', models.CharField(max_length=200, verbose_name='描述')),
                ('from_ip', models.CharField(default='', max_length=19, verbose_name='操作ip')),
                ('ua', models.CharField(default='', max_length=200, verbose_name='浏览器信息')),
                ('add_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='操作用户')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
            },
        ),
        migrations.CreateModel(
            name='GroupProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator_name', models.CharField(blank=True, default='admin', max_length=255, verbose_name='创建者名称')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('desc', models.CharField(blank=True, default='', max_length=255, verbose_name='描述信息')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': '角色扩展',
                'verbose_name_plural': '角色扩展',
            },
        ),
        migrations.CreateModel(
            name='DomainStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='域名', to='base.Domain')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='策略', to='base.Strategy')),
            ],
            options={
                'verbose_name': '域名策略关系',
                'verbose_name_plural': '域名策略关系',
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='add_only',
            field=models.ManyToManyField(blank=True, related_name='产品添加权限', to='base.Product'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='delete_only',
            field=models.ManyToManyField(blank=True, related_name='产品删除权限', to='base.Product'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='edit_only',
            field=models.ManyToManyField(blank=True, related_name='产品修改权限', to='base.Product'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='product_list',
            field=models.ManyToManyField(blank=True, related_name='user_product', to='base.Product'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='read_only',
            field=models.ManyToManyField(blank=True, related_name='产品读取权限', to='base.Product'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='strategy_list',
            field=models.ManyToManyField(blank=True, related_name='服务列表', to='base.Strategy'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
